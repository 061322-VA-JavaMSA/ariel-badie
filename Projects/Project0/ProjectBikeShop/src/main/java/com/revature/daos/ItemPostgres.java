package com.revature.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.revature.models.Item;
import com.revature.models.User;
import com.revature.services.ItemService;
import com.revature.services.UserService;
import com.revature.util.ConnectionUtil;


public class ItemPostgres implements ItemDAO {
	
	private static Logger log = LogManager.getLogger(ItemPostgres.class);

	@Override
	public Item createItem(Item i) {
		String sql = "insert into items (itemName, itemDesc, itemOffer, status, ownedBy) values (?,?,?,?,?) returning id;";
		try(Connection c = ConnectionUtil.getHardcodedConnection()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, i.getItemName());
			ps.setString(2, i.getItemDesc());
			ps.setInt(3, i.getItemOffer());
			ps.setInt(4, i.getStatus());
			ps.setInt(5, i.getOwnedBy());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()) {
				i.setId(rs.getInt("id"));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return i;
	}

	@Override
	public List<Item> retrieveItem() {
		String sql = "select * from items;";
		List<Item> item = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getHardcodedConnection()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Item i = new Item();
				i.setId(rs.getInt("id"));
				i.setItemName(rs.getString("itemName"));
				i.setItemDesc(rs.getString("itemDesc"));
				i.setItemOffer(rs.getInt("itemOffer"));
				i.setStatus(rs.getInt("status"));
				i.setOwnedBy(rs.getInt("ownedBy"));
				
				item.add(i);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return item;
	}

	@Override
	public Item retrieveItemById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Item> retrieveItemByOwnedId(int ownedBy) {
		String sql = "select * from items where ownedBy = ?;";
		List<Item> item = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getHardcodedConnection()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, ownedBy);
			ResultSet rs = ps.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Item i = new Item();
				i.setId(rs.getInt("id"));
				i.setItemName(rs.getString("itemName"));
				i.setItemDesc(rs.getString("itemDesc"));
				i.setItemOffer(rs.getInt("itemOffer"));
				i.setStatus(rs.getInt("status"));
				i.setOwnedBy(rs.getInt("ownedBy"));
				
				item.add(i);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return item;
	}

	@Override
	public boolean updateItem(Item t) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteItemById(int id) {
		String sql = "delete from items where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getHardcodedConnection()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}
	
}

	
